// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gonggooglecharts/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GanttChart sql.NullBool
var __GanttChart_time__dummyDeclaration time.Duration
var dummy_GanttChart_sort sort.Float64Slice

// GanttChartAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model ganttchartAPI
type GanttChartAPI struct {
	models.GanttChart

	// insertion for fields declaration
	// Declation for basic field ganttchartDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// end of insertion
}

// GanttChartDB describes a ganttchart in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model ganttchartDB
type GanttChartDB struct {
	gorm.Model

	GanttChartAPI
}

// GanttChartDBs arrays ganttchartDBs
// swagger:response ganttchartDBsResponse
type GanttChartDBs []GanttChartDB

// GanttChartDBResponse provides response
// swagger:response ganttchartDBResponse
type GanttChartDBResponse struct {
	GanttChartDB
}

type BackRepoGanttChartStruct struct {
	// stores GanttChartDB according to their gorm ID
	Map_GanttChartDBID_GanttChartDB *map[uint]*GanttChartDB

	// stores GanttChartDB ID according to GanttChart address
	Map_GanttChartPtr_GanttChartDBID *map[*models.GanttChart]uint

	// stores GanttChart according to their gorm ID
	Map_GanttChartDBID_GanttChartPtr *map[uint]*models.GanttChart

	db *gorm.DB
}

// BackRepoGanttChart.Init set up the BackRepo of the GanttChart
func (backRepoGanttChart *BackRepoGanttChartStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGanttChart.Map_GanttChartDBID_GanttChartPtr != nil {
		err := errors.New("In Init, backRepoGanttChart.Map_GanttChartDBID_GanttChartPtr should be nil")
		return err
	}

	if backRepoGanttChart.Map_GanttChartDBID_GanttChartDB != nil {
		err := errors.New("In Init, backRepoGanttChart.Map_GanttChartDBID_GanttChartDB should be nil")
		return err
	}

	if backRepoGanttChart.Map_GanttChartPtr_GanttChartDBID != nil {
		err := errors.New("In Init, backRepoGanttChart.Map_GanttChartPtr_GanttChartDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.GanttChart, 0)
	backRepoGanttChart.Map_GanttChartDBID_GanttChartPtr = &tmp

	tmpDB := make(map[uint]*GanttChartDB, 0)
	backRepoGanttChart.Map_GanttChartDBID_GanttChartDB = &tmpDB

	tmpID := make(map[*models.GanttChart]uint, 0)
	backRepoGanttChart.Map_GanttChartPtr_GanttChartDBID = &tmpID

	backRepoGanttChart.db = db
	return
}

// BackRepoGanttChart.CommitPhaseOne commits all staged instances of GanttChart to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGanttChart *BackRepoGanttChartStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for ganttchart := range stage.GanttCharts {
		backRepoGanttChart.CommitPhaseOneInstance(ganttchart)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, ganttchart := range *backRepoGanttChart.Map_GanttChartDBID_GanttChartPtr {
		if _, ok := stage.GanttCharts[ganttchart]; !ok {
			backRepoGanttChart.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGanttChart.CommitDeleteInstance commits deletion of GanttChart to the BackRepo
func (backRepoGanttChart *BackRepoGanttChartStruct) CommitDeleteInstance(id uint) (Error error) {

	ganttchart := (*backRepoGanttChart.Map_GanttChartDBID_GanttChartPtr)[id]

	// ganttchart is not staged anymore, remove ganttchartDB
	ganttchartDB := (*backRepoGanttChart.Map_GanttChartDBID_GanttChartDB)[id]
	query := backRepoGanttChart.db.Unscoped().Delete(&ganttchartDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGanttChart.Map_GanttChartPtr_GanttChartDBID), ganttchart)
	delete((*backRepoGanttChart.Map_GanttChartDBID_GanttChartPtr), id)
	delete((*backRepoGanttChart.Map_GanttChartDBID_GanttChartDB), id)

	return
}

// BackRepoGanttChart.CommitPhaseOneInstance commits ganttchart staged instances of GanttChart to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGanttChart *BackRepoGanttChartStruct) CommitPhaseOneInstance(ganttchart *models.GanttChart) (Error error) {

	// check if the ganttchart is not commited yet
	if _, ok := (*backRepoGanttChart.Map_GanttChartPtr_GanttChartDBID)[ganttchart]; ok {
		return
	}

	// initiate ganttchart
	var ganttchartDB GanttChartDB
	ganttchartDB.GanttChart = *ganttchart

	query := backRepoGanttChart.db.Create(&ganttchartDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGanttChart.Map_GanttChartPtr_GanttChartDBID)[ganttchart] = ganttchartDB.ID
	(*backRepoGanttChart.Map_GanttChartDBID_GanttChartPtr)[ganttchartDB.ID] = ganttchart
	(*backRepoGanttChart.Map_GanttChartDBID_GanttChartDB)[ganttchartDB.ID] = &ganttchartDB

	return
}

// BackRepoGanttChart.CommitPhaseTwo commits all staged instances of GanttChart to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGanttChart *BackRepoGanttChartStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, ganttchart := range *backRepoGanttChart.Map_GanttChartDBID_GanttChartPtr {
		backRepoGanttChart.CommitPhaseTwoInstance(backRepo, idx, ganttchart)
	}

	return
}

// BackRepoGanttChart.CommitPhaseTwoInstance commits {{structname }} of models.GanttChart to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGanttChart *BackRepoGanttChartStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, ganttchart *models.GanttChart) (Error error) {

	// fetch matching ganttchartDB
	if ganttchartDB, ok := (*backRepoGanttChart.Map_GanttChartDBID_GanttChartDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				ganttchartDB.Name_Data.String = ganttchart.Name
				ganttchartDB.Name_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to Task, i.e.
				for _, task := range ganttchart.Tasks {
					index := 0
					if taskDBID, ok := (*backRepo.BackRepoTask.Map_TaskPtr_TaskDBID)[task]; ok {
						if taskDB, ok := (*backRepo.BackRepoTask.Map_TaskDBID_TaskDB)[taskDBID]; ok {
							taskDB.GanttChart_TasksDBID.Int64 = int64(ganttchartDB.ID)
							taskDB.GanttChart_TasksDBID.Valid = true
							taskDB.GanttChart_TasksDBID_Index.Int64 = int64(index)
							index = index + 1
							taskDB.GanttChart_TasksDBID_Index.Valid = true
							if q := backRepoGanttChart.db.Save(&taskDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoGanttChart.db.Save(&ganttchartDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GanttChart intance %s", ganttchart.Name))
		return err
	}

	return
}

// BackRepoGanttChart.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoGanttChart *BackRepoGanttChartStruct) CheckoutPhaseOne() (Error error) {

	ganttchartDBArray := make([]GanttChartDB, 0)
	query := backRepoGanttChart.db.Find(&ganttchartDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, ganttchartDB := range ganttchartDBArray {
		backRepoGanttChart.CheckoutPhaseOneInstance(&ganttchartDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a ganttchartDB that has been found in the DB, updates the backRepo and stages the
// models version of the ganttchartDB
func (backRepoGanttChart *BackRepoGanttChartStruct) CheckoutPhaseOneInstance(ganttchartDB *GanttChartDB) (Error error) {

	// if absent, create entries in the backRepoGanttChart maps.
	ganttchartWithNewFieldValues := ganttchartDB.GanttChart
	if _, ok := (*backRepoGanttChart.Map_GanttChartDBID_GanttChartPtr)[ganttchartDB.ID]; !ok {

		(*backRepoGanttChart.Map_GanttChartDBID_GanttChartPtr)[ganttchartDB.ID] = &ganttchartWithNewFieldValues
		(*backRepoGanttChart.Map_GanttChartPtr_GanttChartDBID)[&ganttchartWithNewFieldValues] = ganttchartDB.ID

		// append model store with the new element
		ganttchartWithNewFieldValues.Stage()
	}
	ganttchartDBWithNewFieldValues := *ganttchartDB
	(*backRepoGanttChart.Map_GanttChartDBID_GanttChartDB)[ganttchartDB.ID] = &ganttchartDBWithNewFieldValues

	return
}

// BackRepoGanttChart.CheckoutPhaseTwo Checkouts all staged instances of GanttChart to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGanttChart *BackRepoGanttChartStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, ganttchartDB := range *backRepoGanttChart.Map_GanttChartDBID_GanttChartDB {
		backRepoGanttChart.CheckoutPhaseTwoInstance(backRepo, ganttchartDB)
	}
	return
}

// BackRepoGanttChart.CheckoutPhaseTwoInstance Checkouts staged instances of GanttChart to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGanttChart *BackRepoGanttChartStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, ganttchartDB *GanttChartDB) (Error error) {

	ganttchart := (*backRepoGanttChart.Map_GanttChartDBID_GanttChartPtr)[ganttchartDB.ID]
	_ = ganttchart // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			ganttchart.Name = ganttchartDB.Name_Data.String

			// parse all TaskDB and redeem the array of poiners to GanttChart
			// first reset the slice
			ganttchart.Tasks = ganttchart.Tasks[:0]
			for _, TaskDB := range *backRepo.BackRepoTask.Map_TaskDBID_TaskDB {
				if TaskDB.GanttChart_TasksDBID.Int64 == int64(ganttchartDB.ID) {
					Task := (*backRepo.BackRepoTask.Map_TaskDBID_TaskPtr)[TaskDB.ID]
					ganttchart.Tasks = append(ganttchart.Tasks, Task)
				}
			}
			
			// sort the array according to the order
			sort.Slice(ganttchart.Tasks, func(i, j int) bool {
				taskDB_i_ID := (*backRepo.BackRepoTask.Map_TaskPtr_TaskDBID)[ganttchart.Tasks[i]]
				taskDB_j_ID := (*backRepo.BackRepoTask.Map_TaskPtr_TaskDBID)[ganttchart.Tasks[j]]

				taskDB_i := (*backRepo.BackRepoTask.Map_TaskDBID_TaskDB)[taskDB_i_ID]
				taskDB_j := (*backRepo.BackRepoTask.Map_TaskDBID_TaskDB)[taskDB_j_ID]

				return taskDB_i.GanttChart_TasksDBID_Index.Int64 < taskDB_j.GanttChart_TasksDBID_Index.Int64
			})

		}
	}
	return
}

// CommitGanttChart allows commit of a single ganttchart (if already staged)
func (backRepo *BackRepoStruct) CommitGanttChart(ganttchart *models.GanttChart) {
	backRepo.BackRepoGanttChart.CommitPhaseOneInstance(ganttchart)
	if id, ok := (*backRepo.BackRepoGanttChart.Map_GanttChartPtr_GanttChartDBID)[ganttchart]; ok {
		backRepo.BackRepoGanttChart.CommitPhaseTwoInstance(backRepo, id, ganttchart)
	}
}

// CommitGanttChart allows checkout of a single ganttchart (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGanttChart(ganttchart *models.GanttChart) {
	// check if the ganttchart is staged
	if _, ok := (*backRepo.BackRepoGanttChart.Map_GanttChartPtr_GanttChartDBID)[ganttchart]; ok {

		if id, ok := (*backRepo.BackRepoGanttChart.Map_GanttChartPtr_GanttChartDBID)[ganttchart]; ok {
			var ganttchartDB GanttChartDB
			ganttchartDB.ID = id

			if err := backRepo.BackRepoGanttChart.db.First(&ganttchartDB, id).Error; err != nil {
				log.Panicln("CheckoutGanttChart : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGanttChart.CheckoutPhaseOneInstance(&ganttchartDB)
			backRepo.BackRepoGanttChart.CheckoutPhaseTwoInstance(backRepo, &ganttchartDB)
		}
	}
}
