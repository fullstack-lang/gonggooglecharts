// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gonggooglecharts/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Ressource sql.NullBool
var __Ressource_time__dummyDeclaration time.Duration
var dummy_Ressource_sort sort.Float64Slice

// RessourceAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model ressourceAPI
type RessourceAPI struct {
	models.Ressource

	// insertion for fields declaration
	// Declation for basic field ressourceDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// end of insertion
}

// RessourceDB describes a ressource in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model ressourceDB
type RessourceDB struct {
	gorm.Model

	RessourceAPI
}

// RessourceDBs arrays ressourceDBs
// swagger:response ressourceDBsResponse
type RessourceDBs []RessourceDB

// RessourceDBResponse provides response
// swagger:response ressourceDBResponse
type RessourceDBResponse struct {
	RessourceDB
}

type BackRepoRessourceStruct struct {
	// stores RessourceDB according to their gorm ID
	Map_RessourceDBID_RessourceDB *map[uint]*RessourceDB

	// stores RessourceDB ID according to Ressource address
	Map_RessourcePtr_RessourceDBID *map[*models.Ressource]uint

	// stores Ressource according to their gorm ID
	Map_RessourceDBID_RessourcePtr *map[uint]*models.Ressource

	db *gorm.DB
}

// BackRepoRessource.Init set up the BackRepo of the Ressource
func (backRepoRessource *BackRepoRessourceStruct) Init(db *gorm.DB) (Error error) {

	if backRepoRessource.Map_RessourceDBID_RessourcePtr != nil {
		err := errors.New("In Init, backRepoRessource.Map_RessourceDBID_RessourcePtr should be nil")
		return err
	}

	if backRepoRessource.Map_RessourceDBID_RessourceDB != nil {
		err := errors.New("In Init, backRepoRessource.Map_RessourceDBID_RessourceDB should be nil")
		return err
	}

	if backRepoRessource.Map_RessourcePtr_RessourceDBID != nil {
		err := errors.New("In Init, backRepoRessource.Map_RessourcePtr_RessourceDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Ressource, 0)
	backRepoRessource.Map_RessourceDBID_RessourcePtr = &tmp

	tmpDB := make(map[uint]*RessourceDB, 0)
	backRepoRessource.Map_RessourceDBID_RessourceDB = &tmpDB

	tmpID := make(map[*models.Ressource]uint, 0)
	backRepoRessource.Map_RessourcePtr_RessourceDBID = &tmpID

	backRepoRessource.db = db
	return
}

// BackRepoRessource.CommitPhaseOne commits all staged instances of Ressource to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRessource *BackRepoRessourceStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for ressource := range stage.Ressources {
		backRepoRessource.CommitPhaseOneInstance(ressource)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, ressource := range *backRepoRessource.Map_RessourceDBID_RessourcePtr {
		if _, ok := stage.Ressources[ressource]; !ok {
			backRepoRessource.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRessource.CommitDeleteInstance commits deletion of Ressource to the BackRepo
func (backRepoRessource *BackRepoRessourceStruct) CommitDeleteInstance(id uint) (Error error) {

	ressource := (*backRepoRessource.Map_RessourceDBID_RessourcePtr)[id]

	// ressource is not staged anymore, remove ressourceDB
	ressourceDB := (*backRepoRessource.Map_RessourceDBID_RessourceDB)[id]
	query := backRepoRessource.db.Unscoped().Delete(&ressourceDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoRessource.Map_RessourcePtr_RessourceDBID), ressource)
	delete((*backRepoRessource.Map_RessourceDBID_RessourcePtr), id)
	delete((*backRepoRessource.Map_RessourceDBID_RessourceDB), id)

	return
}

// BackRepoRessource.CommitPhaseOneInstance commits ressource staged instances of Ressource to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRessource *BackRepoRessourceStruct) CommitPhaseOneInstance(ressource *models.Ressource) (Error error) {

	// check if the ressource is not commited yet
	if _, ok := (*backRepoRessource.Map_RessourcePtr_RessourceDBID)[ressource]; ok {
		return
	}

	// initiate ressource
	var ressourceDB RessourceDB
	ressourceDB.Ressource = *ressource

	query := backRepoRessource.db.Create(&ressourceDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoRessource.Map_RessourcePtr_RessourceDBID)[ressource] = ressourceDB.ID
	(*backRepoRessource.Map_RessourceDBID_RessourcePtr)[ressourceDB.ID] = ressource
	(*backRepoRessource.Map_RessourceDBID_RessourceDB)[ressourceDB.ID] = &ressourceDB

	return
}

// BackRepoRessource.CommitPhaseTwo commits all staged instances of Ressource to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRessource *BackRepoRessourceStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, ressource := range *backRepoRessource.Map_RessourceDBID_RessourcePtr {
		backRepoRessource.CommitPhaseTwoInstance(backRepo, idx, ressource)
	}

	return
}

// BackRepoRessource.CommitPhaseTwoInstance commits {{structname }} of models.Ressource to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRessource *BackRepoRessourceStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, ressource *models.Ressource) (Error error) {

	// fetch matching ressourceDB
	if ressourceDB, ok := (*backRepoRessource.Map_RessourceDBID_RessourceDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				ressourceDB.Name_Data.String = ressource.Name
				ressourceDB.Name_Data.Valid = true

			}
		}
		query := backRepoRessource.db.Save(&ressourceDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Ressource intance %s", ressource.Name))
		return err
	}

	return
}

// BackRepoRessource.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoRessource *BackRepoRessourceStruct) CheckoutPhaseOne() (Error error) {

	ressourceDBArray := make([]RessourceDB, 0)
	query := backRepoRessource.db.Find(&ressourceDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, ressourceDB := range ressourceDBArray {
		backRepoRessource.CheckoutPhaseOneInstance(&ressourceDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a ressourceDB that has been found in the DB, updates the backRepo and stages the
// models version of the ressourceDB
func (backRepoRessource *BackRepoRessourceStruct) CheckoutPhaseOneInstance(ressourceDB *RessourceDB) (Error error) {

	// if absent, create entries in the backRepoRessource maps.
	ressourceWithNewFieldValues := ressourceDB.Ressource
	if _, ok := (*backRepoRessource.Map_RessourceDBID_RessourcePtr)[ressourceDB.ID]; !ok {

		(*backRepoRessource.Map_RessourceDBID_RessourcePtr)[ressourceDB.ID] = &ressourceWithNewFieldValues
		(*backRepoRessource.Map_RessourcePtr_RessourceDBID)[&ressourceWithNewFieldValues] = ressourceDB.ID

		// append model store with the new element
		ressourceWithNewFieldValues.Stage()
	}
	ressourceDBWithNewFieldValues := *ressourceDB
	(*backRepoRessource.Map_RessourceDBID_RessourceDB)[ressourceDB.ID] = &ressourceDBWithNewFieldValues

	return
}

// BackRepoRessource.CheckoutPhaseTwo Checkouts all staged instances of Ressource to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRessource *BackRepoRessourceStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, ressourceDB := range *backRepoRessource.Map_RessourceDBID_RessourceDB {
		backRepoRessource.CheckoutPhaseTwoInstance(backRepo, ressourceDB)
	}
	return
}

// BackRepoRessource.CheckoutPhaseTwoInstance Checkouts staged instances of Ressource to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRessource *BackRepoRessourceStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, ressourceDB *RessourceDB) (Error error) {

	ressource := (*backRepoRessource.Map_RessourceDBID_RessourcePtr)[ressourceDB.ID]
	_ = ressource // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			ressource.Name = ressourceDB.Name_Data.String

		}
	}
	return
}

// CommitRessource allows commit of a single ressource (if already staged)
func (backRepo *BackRepoStruct) CommitRessource(ressource *models.Ressource) {
	backRepo.BackRepoRessource.CommitPhaseOneInstance(ressource)
	if id, ok := (*backRepo.BackRepoRessource.Map_RessourcePtr_RessourceDBID)[ressource]; ok {
		backRepo.BackRepoRessource.CommitPhaseTwoInstance(backRepo, id, ressource)
	}
}

// CommitRessource allows checkout of a single ressource (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRessource(ressource *models.Ressource) {
	// check if the ressource is staged
	if _, ok := (*backRepo.BackRepoRessource.Map_RessourcePtr_RessourceDBID)[ressource]; ok {

		if id, ok := (*backRepo.BackRepoRessource.Map_RessourcePtr_RessourceDBID)[ressource]; ok {
			var ressourceDB RessourceDB
			ressourceDB.ID = id

			if err := backRepo.BackRepoRessource.db.First(&ressourceDB, id).Error; err != nil {
				log.Panicln("CheckoutRessource : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRessource.CheckoutPhaseOneInstance(&ressourceDB)
			backRepo.BackRepoRessource.CheckoutPhaseTwoInstance(backRepo, &ressourceDB)
		}
	}
}
