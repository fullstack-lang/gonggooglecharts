// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	GanttCharts map[*GanttChart]struct{}

	Ressources map[*Ressource]struct{}

	Tasks map[*Task]struct{}

	TaskUses map[*TaskUse]struct{}

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	// insertion point for Commit and Checkout signatures
	CommitGanttChart(ganttchart *GanttChart)
	CheckoutGanttChart(ganttchart *GanttChart)
	CommitRessource(ressource *Ressource)
	CheckoutRessource(ressource *Ressource)
	CommitTask(task *Task)
	CheckoutTask(task *Task)
	CommitTaskUse(taskuse *TaskUse)
	CheckoutTaskUse(taskuse *TaskUse)
	GetLastCommitNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	GanttCharts: make(map[*GanttChart]struct{}, 0),

	Ressources: make(map[*Ressource]struct{}, 0),

	Tasks: make(map[*Task]struct{}, 0),

	TaskUses: make(map[*TaskUse]struct{}, 0),

}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getGanttChartOrderedStructWithNameField() []*GanttChart {
	// have alphabetical order generation
	ganttchartOrdered := []*GanttChart{}
	for ganttchart := range stage.GanttCharts {
		ganttchartOrdered = append(ganttchartOrdered, ganttchart)
	}
	sort.Slice(ganttchartOrdered[:], func(i, j int) bool {
		return ganttchartOrdered[i].Name < ganttchartOrdered[j].Name
	})
	return ganttchartOrdered
}

// Stage puts ganttchart to the model stage
func (ganttchart *GanttChart) Stage() *GanttChart {
	Stage.GanttCharts[ganttchart] = __member
	return ganttchart
}

// Unstage removes ganttchart off the model stage
func (ganttchart *GanttChart) Unstage() *GanttChart {
	delete(Stage.GanttCharts, ganttchart)
	return ganttchart
}

// commit ganttchart to the back repo (if it is already staged)
func (ganttchart *GanttChart) Commit() *GanttChart {
	if _, ok := Stage.GanttCharts[ganttchart]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGanttChart(ganttchart)
		}
	}
	return ganttchart
}

// Checkout ganttchart to the back repo (if it is already staged)
func (ganttchart *GanttChart) Checkout() *GanttChart {
	if _, ok := Stage.GanttCharts[ganttchart]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGanttChart(ganttchart)
		}
	}
	return ganttchart
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of ganttchart to the model stage
func (ganttchart *GanttChart) StageCopy() *GanttChart {
	_ganttchart := new(GanttChart)
	*_ganttchart = *ganttchart
	_ganttchart.Stage()
	return _ganttchart
}

// StageAndCommit appends ganttchart to the model stage and commit to the orm repo
func (ganttchart *GanttChart) StageAndCommit() *GanttChart {
	ganttchart.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGanttChart(ganttchart)
	}
	return ganttchart
}

// DeleteStageAndCommit appends ganttchart to the model stage and commit to the orm repo
func (ganttchart *GanttChart) DeleteStageAndCommit() *GanttChart {
	ganttchart.Unstage()
	DeleteORMGanttChart(ganttchart)
	return ganttchart
}

// StageCopyAndCommit appends a copy of ganttchart to the model stage and commit to the orm repo
func (ganttchart *GanttChart) StageCopyAndCommit() *GanttChart {
	_ganttchart := new(GanttChart)
	*_ganttchart = *ganttchart
	_ganttchart.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGanttChart(ganttchart)
	}
	return _ganttchart
}

// CreateORMGanttChart enables dynamic staging of a GanttChart instance
func CreateORMGanttChart(ganttchart *GanttChart) {
	ganttchart.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGanttChart(ganttchart)
	}
}

// DeleteORMGanttChart enables dynamic staging of a GanttChart instance
func DeleteORMGanttChart(ganttchart *GanttChart) {
	ganttchart.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGanttChart(ganttchart)
	}
}

func (stage *StageStruct) getRessourceOrderedStructWithNameField() []*Ressource {
	// have alphabetical order generation
	ressourceOrdered := []*Ressource{}
	for ressource := range stage.Ressources {
		ressourceOrdered = append(ressourceOrdered, ressource)
	}
	sort.Slice(ressourceOrdered[:], func(i, j int) bool {
		return ressourceOrdered[i].Name < ressourceOrdered[j].Name
	})
	return ressourceOrdered
}

// Stage puts ressource to the model stage
func (ressource *Ressource) Stage() *Ressource {
	Stage.Ressources[ressource] = __member
	return ressource
}

// Unstage removes ressource off the model stage
func (ressource *Ressource) Unstage() *Ressource {
	delete(Stage.Ressources, ressource)
	return ressource
}

// commit ressource to the back repo (if it is already staged)
func (ressource *Ressource) Commit() *Ressource {
	if _, ok := Stage.Ressources[ressource]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitRessource(ressource)
		}
	}
	return ressource
}

// Checkout ressource to the back repo (if it is already staged)
func (ressource *Ressource) Checkout() *Ressource {
	if _, ok := Stage.Ressources[ressource]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutRessource(ressource)
		}
	}
	return ressource
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of ressource to the model stage
func (ressource *Ressource) StageCopy() *Ressource {
	_ressource := new(Ressource)
	*_ressource = *ressource
	_ressource.Stage()
	return _ressource
}

// StageAndCommit appends ressource to the model stage and commit to the orm repo
func (ressource *Ressource) StageAndCommit() *Ressource {
	ressource.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRessource(ressource)
	}
	return ressource
}

// DeleteStageAndCommit appends ressource to the model stage and commit to the orm repo
func (ressource *Ressource) DeleteStageAndCommit() *Ressource {
	ressource.Unstage()
	DeleteORMRessource(ressource)
	return ressource
}

// StageCopyAndCommit appends a copy of ressource to the model stage and commit to the orm repo
func (ressource *Ressource) StageCopyAndCommit() *Ressource {
	_ressource := new(Ressource)
	*_ressource = *ressource
	_ressource.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRessource(ressource)
	}
	return _ressource
}

// CreateORMRessource enables dynamic staging of a Ressource instance
func CreateORMRessource(ressource *Ressource) {
	ressource.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRessource(ressource)
	}
}

// DeleteORMRessource enables dynamic staging of a Ressource instance
func DeleteORMRessource(ressource *Ressource) {
	ressource.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMRessource(ressource)
	}
}

func (stage *StageStruct) getTaskOrderedStructWithNameField() []*Task {
	// have alphabetical order generation
	taskOrdered := []*Task{}
	for task := range stage.Tasks {
		taskOrdered = append(taskOrdered, task)
	}
	sort.Slice(taskOrdered[:], func(i, j int) bool {
		return taskOrdered[i].Name < taskOrdered[j].Name
	})
	return taskOrdered
}

// Stage puts task to the model stage
func (task *Task) Stage() *Task {
	Stage.Tasks[task] = __member
	return task
}

// Unstage removes task off the model stage
func (task *Task) Unstage() *Task {
	delete(Stage.Tasks, task)
	return task
}

// commit task to the back repo (if it is already staged)
func (task *Task) Commit() *Task {
	if _, ok := Stage.Tasks[task]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitTask(task)
		}
	}
	return task
}

// Checkout task to the back repo (if it is already staged)
func (task *Task) Checkout() *Task {
	if _, ok := Stage.Tasks[task]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutTask(task)
		}
	}
	return task
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of task to the model stage
func (task *Task) StageCopy() *Task {
	_task := new(Task)
	*_task = *task
	_task.Stage()
	return _task
}

// StageAndCommit appends task to the model stage and commit to the orm repo
func (task *Task) StageAndCommit() *Task {
	task.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMTask(task)
	}
	return task
}

// DeleteStageAndCommit appends task to the model stage and commit to the orm repo
func (task *Task) DeleteStageAndCommit() *Task {
	task.Unstage()
	DeleteORMTask(task)
	return task
}

// StageCopyAndCommit appends a copy of task to the model stage and commit to the orm repo
func (task *Task) StageCopyAndCommit() *Task {
	_task := new(Task)
	*_task = *task
	_task.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMTask(task)
	}
	return _task
}

// CreateORMTask enables dynamic staging of a Task instance
func CreateORMTask(task *Task) {
	task.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMTask(task)
	}
}

// DeleteORMTask enables dynamic staging of a Task instance
func DeleteORMTask(task *Task) {
	task.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMTask(task)
	}
}

func (stage *StageStruct) getTaskUseOrderedStructWithNameField() []*TaskUse {
	// have alphabetical order generation
	taskuseOrdered := []*TaskUse{}
	for taskuse := range stage.TaskUses {
		taskuseOrdered = append(taskuseOrdered, taskuse)
	}
	sort.Slice(taskuseOrdered[:], func(i, j int) bool {
		return taskuseOrdered[i].Name < taskuseOrdered[j].Name
	})
	return taskuseOrdered
}

// Stage puts taskuse to the model stage
func (taskuse *TaskUse) Stage() *TaskUse {
	Stage.TaskUses[taskuse] = __member
	return taskuse
}

// Unstage removes taskuse off the model stage
func (taskuse *TaskUse) Unstage() *TaskUse {
	delete(Stage.TaskUses, taskuse)
	return taskuse
}

// commit taskuse to the back repo (if it is already staged)
func (taskuse *TaskUse) Commit() *TaskUse {
	if _, ok := Stage.TaskUses[taskuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitTaskUse(taskuse)
		}
	}
	return taskuse
}

// Checkout taskuse to the back repo (if it is already staged)
func (taskuse *TaskUse) Checkout() *TaskUse {
	if _, ok := Stage.TaskUses[taskuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutTaskUse(taskuse)
		}
	}
	return taskuse
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of taskuse to the model stage
func (taskuse *TaskUse) StageCopy() *TaskUse {
	_taskuse := new(TaskUse)
	*_taskuse = *taskuse
	_taskuse.Stage()
	return _taskuse
}

// StageAndCommit appends taskuse to the model stage and commit to the orm repo
func (taskuse *TaskUse) StageAndCommit() *TaskUse {
	taskuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMTaskUse(taskuse)
	}
	return taskuse
}

// DeleteStageAndCommit appends taskuse to the model stage and commit to the orm repo
func (taskuse *TaskUse) DeleteStageAndCommit() *TaskUse {
	taskuse.Unstage()
	DeleteORMTaskUse(taskuse)
	return taskuse
}

// StageCopyAndCommit appends a copy of taskuse to the model stage and commit to the orm repo
func (taskuse *TaskUse) StageCopyAndCommit() *TaskUse {
	_taskuse := new(TaskUse)
	*_taskuse = *taskuse
	_taskuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMTaskUse(taskuse)
	}
	return _taskuse
}

// CreateORMTaskUse enables dynamic staging of a TaskUse instance
func CreateORMTaskUse(taskuse *TaskUse) {
	taskuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMTaskUse(taskuse)
	}
}

// DeleteORMTaskUse enables dynamic staging of a TaskUse instance
func DeleteORMTaskUse(taskuse *TaskUse) {
	taskuse.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMTaskUse(taskuse)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMGanttChart(GanttChart *GanttChart)
	CreateORMRessource(Ressource *Ressource)
	CreateORMTask(Task *Task)
	CreateORMTaskUse(TaskUse *TaskUse)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMGanttChart(GanttChart *GanttChart)
	DeleteORMRessource(Ressource *Ressource)
	DeleteORMTask(Task *Task)
	DeleteORMTaskUse(TaskUse *TaskUse)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.GanttCharts = make(map[*GanttChart]struct{}, 0)
	stage.Ressources = make(map[*Ressource]struct{}, 0)
	stage.Tasks = make(map[*Task]struct{}, 0)
	stage.TaskUses = make(map[*TaskUse]struct{}, 0)
}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.GanttCharts = nil
	stage.Ressources = nil
	stage.Tasks = nil
	stage.TaskUses = nil
}
