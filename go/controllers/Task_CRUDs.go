// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gonggooglecharts/go/models"
	"github.com/fullstack-lang/gonggooglecharts/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Task__dummysDeclaration__ models.Task
var __Task_time__dummyDeclaration time.Duration

// An TaskID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getTask updateTask deleteTask
type TaskID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// TaskInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postTask updateTask
type TaskInput struct {
	// The Task to submit or modify
	// in: body
	Task *orm.TaskAPI
}

// GetTasks
//
// swagger:route GET /tasks tasks getTasks
//
// Get all tasks
//
// Responses:
//    default: genericError
//        200: taskDBsResponse
func GetTasks(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var tasks []orm.TaskDB
	query := db.Find(&tasks)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each task, update fields from the database nullable fields
	for idx := range tasks {
		task := &tasks[idx]
		_ = task
		// insertion point for updating fields
		if task.Name_Data.Valid {
			task.Name = task.Name_Data.String
		}

		if task.DisplayedName_Data.Valid {
			task.DisplayedName = task.DisplayedName_Data.String
		}

		if task.Start_Data.Valid {
			task.Start = task.Start_Data.Time
		}

		if task.End_Data.Valid {
			task.End = task.End_Data.Time
		}

		if task.Duration_Data.Valid {
			task.Duration = time.Duration(task.Duration_Data.Int64)
		}

		if task.PercentComplete_Data.Valid {
			task.PercentComplete = task.PercentComplete_Data.Float64
		}

		if task.Rank_Data.Valid {
			task.Rank = int(task.Rank_Data.Int64)
		}

	}

	c.JSON(http.StatusOK, tasks)
}

// PostTask
//
// swagger:route POST /tasks tasks postTask
//
// Creates a task
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: taskDBResponse
func PostTask(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.TaskAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create task
	taskDB := orm.TaskDB{}
	taskDB.TaskAPI = input
	// insertion point for nullable field set
	taskDB.Name_Data.String = input.Name
	taskDB.Name_Data.Valid = true

	taskDB.DisplayedName_Data.String = input.DisplayedName
	taskDB.DisplayedName_Data.Valid = true

	taskDB.Start_Data.Time = input.Start
	taskDB.Start_Data.Valid = true

	taskDB.End_Data.Time = input.End
	taskDB.End_Data.Valid = true

	taskDB.Duration_Data.Int64 = int64(input.Duration)
	taskDB.Duration_Data.Valid = true

	taskDB.PercentComplete_Data.Float64 = input.PercentComplete
	taskDB.PercentComplete_Data.Valid = true

	taskDB.Rank_Data.Int64 = int64(input.Rank)
	taskDB.Rank_Data.Valid = true

	query := db.Create(&taskDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, taskDB)
}

// GetTask
//
// swagger:route GET /tasks/{ID} tasks getTask
//
// Gets the details for a task.
//
// Responses:
//    default: genericError
//        200: taskDBResponse
func GetTask(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get task in DB
	var task orm.TaskDB
	if err := db.First(&task, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if task.Name_Data.Valid {
		task.Name = task.Name_Data.String
	}

	if task.DisplayedName_Data.Valid {
		task.DisplayedName = task.DisplayedName_Data.String
	}

	if task.Start_Data.Valid {
		task.Start = task.Start_Data.Time
	}

	if task.End_Data.Valid {
		task.End = task.End_Data.Time
	}

	if task.Duration_Data.Valid {
		task.Duration = time.Duration(task.Duration_Data.Int64)
	}

	if task.PercentComplete_Data.Valid {
		task.PercentComplete = task.PercentComplete_Data.Float64
	}

	if task.Rank_Data.Valid {
		task.Rank = int(task.Rank_Data.Int64)
	}

	c.JSON(http.StatusOK, task)
}

// UpdateTask
//
// swagger:route PATCH /tasks/{ID} tasks updateTask
//
// Update a task
//
// Responses:
//    default: genericError
//        200: taskDBResponse
func UpdateTask(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var taskDB orm.TaskDB

	// fetch the task
	query := db.First(&taskDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.TaskAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.DisplayedName_Data.String = input.DisplayedName
	input.DisplayedName_Data.Valid = true

	input.Start_Data.Time = input.Start
	input.Start_Data.Valid = true

	input.End_Data.Time = input.End
	input.End_Data.Valid = true

	input.Duration_Data.Int64 = int64(input.Duration)
	input.Duration_Data.Valid = true

	input.PercentComplete_Data.Float64 = input.PercentComplete
	input.PercentComplete_Data.Valid = true

	input.Rank_Data.Int64 = int64(input.Rank)
	input.Rank_Data.Valid = true

	query = db.Model(&taskDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the taskDB
	c.JSON(http.StatusOK, taskDB)
}

// DeleteTask
//
// swagger:route DELETE /tasks/{ID} tasks deleteTask
//
// Delete a task
//
// Responses:
//    default: genericError
func DeleteTask(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var taskDB orm.TaskDB
	if err := db.First(&taskDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&taskDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
