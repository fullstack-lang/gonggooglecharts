// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gonggooglecharts/go/models"
	"github.com/fullstack-lang/gonggooglecharts/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Task__dummysDeclaration__ models.Task
var __Task_time__dummyDeclaration time.Duration

// An TaskID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getTask updateTask deleteTask
type TaskID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// TaskInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postTask updateTask
type TaskInput struct {
	// The Task to submit or modify
	// in: body
	Task *orm.TaskAPI
}

// GetTasks
//
// swagger:route GET /tasks tasks getTasks
//
// Get all tasks
//
// Responses:
//    default: genericError
//        200: taskDBsResponse
func GetTasks(c *gin.Context) {
	db := orm.BackRepo.BackRepoTask.GetDB()
	
	// source slice
	var taskDBs []orm.TaskDB
	query := db.Find(&taskDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	taskAPIs := make([]orm.TaskAPI, 0)

	// for each task, update fields from the database nullable fields
	for idx := range taskDBs {
		taskDB := &taskDBs[idx]
		_ = taskDB
		var taskAPI orm.TaskAPI

		// insertion point for updating fields
		taskAPI.ID = taskDB.ID
		taskDB.CopyBasicFieldsToTask(&taskAPI.Task)
		taskAPI.TaskPointersEnconding = taskDB.TaskPointersEnconding
		taskAPIs = append(taskAPIs, taskAPI)
	}

	c.JSON(http.StatusOK, taskAPIs)
}

// PostTask
//
// swagger:route POST /tasks tasks postTask
//
// Creates a task
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: taskDBResponse
func PostTask(c *gin.Context) {
	db := orm.BackRepo.BackRepoTask.GetDB()

	// Validate input
	var input orm.TaskAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create task
	taskDB := orm.TaskDB{}
	taskDB.TaskPointersEnconding = input.TaskPointersEnconding
	taskDB.CopyBasicFieldsFromTask(&input.Task)

	query := db.Create(&taskDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, taskDB)
}

// GetTask
//
// swagger:route GET /tasks/{ID} tasks getTask
//
// Gets the details for a task.
//
// Responses:
//    default: genericError
//        200: taskDBResponse
func GetTask(c *gin.Context) {
	db := orm.BackRepo.BackRepoTask.GetDB()

	// Get taskDB in DB
	var taskDB orm.TaskDB
	if err := db.First(&taskDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var taskAPI orm.TaskAPI
	taskAPI.ID = taskDB.ID
	taskAPI.TaskPointersEnconding = taskDB.TaskPointersEnconding
	taskDB.CopyBasicFieldsToTask(&taskAPI.Task)

	c.JSON(http.StatusOK, taskAPI)
}

// UpdateTask
//
// swagger:route PATCH /tasks/{ID} tasks updateTask
//
// Update a task
//
// Responses:
//    default: genericError
//        200: taskDBResponse
func UpdateTask(c *gin.Context) {
	db := orm.BackRepo.BackRepoTask.GetDB()

	// Get model if exist
	var taskDB orm.TaskDB

	// fetch the task
	query := db.First(&taskDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.TaskAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	taskDB.CopyBasicFieldsFromTask(&input.Task)
	taskDB.TaskPointersEnconding = input.TaskPointersEnconding

	query = db.Model(&taskDB).Updates(taskDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the taskDB
	c.JSON(http.StatusOK, taskDB)
}

// DeleteTask
//
// swagger:route DELETE /tasks/{ID} tasks deleteTask
//
// Delete a task
//
// Responses:
//    default: genericError
func DeleteTask(c *gin.Context) {
	db := orm.BackRepo.BackRepoTask.GetDB()

	// Get model if exist
	var taskDB orm.TaskDB
	if err := db.First(&taskDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&taskDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
