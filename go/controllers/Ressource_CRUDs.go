// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gonggooglecharts/go/models"
	"github.com/fullstack-lang/gonggooglecharts/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Ressource__dummysDeclaration__ models.Ressource
var __Ressource_time__dummyDeclaration time.Duration

// An RessourceID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getRessource updateRessource deleteRessource
type RessourceID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// RessourceInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postRessource updateRessource
type RessourceInput struct {
	// The Ressource to submit or modify
	// in: body
	Ressource *orm.RessourceAPI
}

// GetRessources
//
// swagger:route GET /ressources ressources getRessources
//
// Get all ressources
//
// Responses:
//    default: genericError
//        200: ressourceDBsResponse
func GetRessources(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var ressources []orm.RessourceDB
	query := db.Find(&ressources)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each ressource, update fields from the database nullable fields
	for idx := range ressources {
		ressource := &ressources[idx]
		_ = ressource
		// insertion point for updating fields
		if ressource.Name_Data.Valid {
			ressource.Name = ressource.Name_Data.String
		}

	}

	c.JSON(http.StatusOK, ressources)
}

// PostRessource
//
// swagger:route POST /ressources ressources postRessource
//
// Creates a ressource
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: ressourceDBResponse
func PostRessource(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.RessourceAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create ressource
	ressourceDB := orm.RessourceDB{}
	ressourceDB.RessourceAPI = input
	// insertion point for nullable field set
	ressourceDB.Name_Data.String = input.Name
	ressourceDB.Name_Data.Valid = true

	query := db.Create(&ressourceDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, ressourceDB)
}

// GetRessource
//
// swagger:route GET /ressources/{ID} ressources getRessource
//
// Gets the details for a ressource.
//
// Responses:
//    default: genericError
//        200: ressourceDBResponse
func GetRessource(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get ressource in DB
	var ressource orm.RessourceDB
	if err := db.First(&ressource, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if ressource.Name_Data.Valid {
		ressource.Name = ressource.Name_Data.String
	}

	c.JSON(http.StatusOK, ressource)
}

// UpdateRessource
//
// swagger:route PATCH /ressources/{ID} ressources updateRessource
//
// Update a ressource
//
// Responses:
//    default: genericError
//        200: ressourceDBResponse
func UpdateRessource(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var ressourceDB orm.RessourceDB

	// fetch the ressource
	query := db.First(&ressourceDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.RessourceAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	query = db.Model(&ressourceDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the ressourceDB
	c.JSON(http.StatusOK, ressourceDB)
}

// DeleteRessource
//
// swagger:route DELETE /ressources/{ID} ressources deleteRessource
//
// Delete a ressource
//
// Responses:
//    default: genericError
func DeleteRessource(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var ressourceDB orm.RessourceDB
	if err := db.First(&ressourceDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&ressourceDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
